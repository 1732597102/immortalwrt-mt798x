--- a/include/net/netfilter/nf_conntrack_acct.h	2024-01-04 22:35:10.790631711 +0800
+++ b/include/net/netfilter/nf_conntrack_acct.h	2024-01-04 22:16:10.301488000 +0800
@@ -14,6 +14,8 @@
 struct nf_conn_counter {
 	atomic64_t packets;
 	atomic64_t bytes;
+	atomic64_t diff_packets;
+	atomic64_t diff_bytes;
 };
 
 struct nf_conn_acct {

--- a/net/ipv4/netfilter/ip_tables.c	2024-01-01 02:04:02.972938000 +0800
+++ b/net/ipv4/netfilter/ip_tables.c	2024-01-05 19:30:17.431634011 +0800
@@ -27,6 +27,8 @@
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <net/netfilter/nf_log.h>
 #include "../../netfilter/xt_repldata.h"
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_acct.h>
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
@@ -291,7 +293,12 @@
 	const struct xt_table_info *private;
 	struct xt_action_param acpar;
 	unsigned int addend;
-
+	
+	struct nf_conn *ct;
+	struct nf_conn_acct *acct;
+	struct nf_conn_counter *conn_counter;
+	enum ip_conntrack_info ctinfo;
+	
 	/* Initialization */
 	WARN_ON(!(table->valid_hooks & (1 << hook)));
 	local_bh_disable();
@@ -302,9 +309,19 @@
 	e = get_entry(table_base, private->hook_entry[hook]);
 	if (ipt_handle_default_rule(e, &verdict)) {
 		struct xt_counters *counter;
-
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
+		
+		ct = nf_ct_get(skb, &ctinfo);
+		if (ct) {
+			acct = nf_conn_acct_find(ct);
+			if (acct) {
+			conn_counter = acct->counter;			
+			ADD_COUNTER(*counter, 		   	    
+ atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_bytes),atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_packets));
+				}}
+
+			
 		local_bh_enable();
 		return verdict;
 	}
@@ -360,6 +377,15 @@
 
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
+		ct = nf_ct_get(skb, &ctinfo);
+		if (ct) {
+			acct = nf_conn_acct_find(ct);
+			if (acct) {
+			conn_counter = acct->counter;			
+			ADD_COUNTER(*counter, 		   	    
+ atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_bytes),atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_packets));
+				}
+			}
 
 		t = ipt_get_target_c(e);
 		WARN_ON(!t->u.kernel.target);
--- a/net/ipv6/netfilter/ip6_tables.c	2023-08-30 22:27:28.000000000 +0800
+++ b/net/ipv6/netfilter/ip6_tables.c	2024-01-05 19:21:37.364542288 +0800
@@ -31,6 +31,8 @@
 #include <linux/netfilter/x_tables.h>
 #include <net/netfilter/nf_log.h>
 #include "../../netfilter/xt_repldata.h"
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_acct.h>
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
@@ -262,7 +264,12 @@
 	const struct xt_table_info *private;
 	struct xt_action_param acpar;
 	unsigned int addend;
-
+	
+	struct nf_conn *ct;
+	struct nf_conn_acct *acct;
+	struct nf_conn_counter *conn_counter;
+	enum ip_conntrack_info ctinfo;
+	
 	/* Initialization */
 	stackidx = 0;
 	indev = state->in ? state->in->name : nulldevname;
@@ -285,6 +292,7 @@
 	cpu        = smp_processor_id();
 	table_base = private->entries;
 	jumpstack  = (struct ip6t_entry **)private->jumpstack[cpu];
+	
 
 	/* Switch to alternate jumpstack if we're being invoked via TEE.
 	 * TEE issues XT_CONTINUE verdict on original skb so we must not
@@ -321,7 +329,17 @@
 
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
-
+		
+		ct = nf_ct_get(skb, &ctinfo);
+		if (ct) {
+			acct = nf_conn_acct_find(ct);
+			if (acct) {
+			conn_counter = acct->counter;			
+			ADD_COUNTER(*counter, 		   	    
+ atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_bytes),atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_packets));
+				}
+			}
+			
 		t = ip6t_get_target_c(e);
 		WARN_ON(!t->u.kernel.target);
 

